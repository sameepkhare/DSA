## BIT-MANIPULATION ##

**Get the maximum integer**


int maxInt = ~(1 << 31);
int maxInt = (1 << 31) - 1;
int maxInt = (1 << -1) - 1;


**Get the minimum integer**


int minInt = 1 << 31;
int minInt = 1 << -1;

**Multiplied by 2**

n << 1; // n*2

**Divided by 2**


n >> 1; // n/2


**Multiplied by the m-th power of 2**

n << m; // (3<<5) ==>3 * 2^5 ==> 96

**Divided by the m-th power of 2**


n >> m; // (20>>2) ==>(20/( 2^2) ==> 5

**Check odd number**

(n & 1) == 1;

**Exchange two values**

a ^= b;
b ^= a;
a ^= b;

**Get absolute value**

(n ^ (n >> 31)) - (n >> 31);

**Get the max of two values**


b & ((a-b) >> 31) | a & (~(a-b) >> 31);

**Get the min of two values**

a & ((a-b) >> 31) | b & (~(a-b) >> 31);

**Check whether both have the same sign**

(x ^ y) >= 0;

**Calculate 2^n**

2 << (n-1);

**Whether is factorial of 2**

n > 0 ? (n & (n - 1)) == 0 : false;

**Modulo 2^n against m**

m & (n - 1);

**Get the average**

(x + y) >> 1;
((x ^ y) >> 1) + (x & y);

**Get the m-th bit of n (from low to high)**

(n >> (m-1)) & 1;

**Set the m-th bit of n to 0 (from low to high)**

n & ~(1 << (m-1));

**n + 1**

-~n

**n - 1**

~-n



**Get the contrast number**

~n + 1;
(n ^ -1) + 1;



**if (x==a) x=b; if (x==b) x=a;**

x = a ^ b ^ x;

